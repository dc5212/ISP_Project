# Define the ABFile class
class ABFile:
    def __init__(self, filename, create):
        # Initialize variables and open A/B files
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'
        
        if create:
            self.Afile = openfile(self.Afn, create)
            self.Bfile = openfile(self.Bfn, create)
            self.Afile.writeat('SE', 0)

    def writeat(self, data, offset):
        # Write data to the B file
        self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Read data from the A file
        return self.Afile.readat(bytes, offset)

    def close(self):
        # Close both A/B files
        self.Afile.close()
        self.Bfile.close()


# Define the ABopenfile function
def ABopenfile(filename, create):
    # Create and return an instance of ABFile
    return ABFile(filename, create)


# Main execution
if __name__ == "__main__":
    # Implement test cases here
    if "testfile.txt.a" in listfiles():
        removefile("testfile.txt.a")
    if "testfile.txt.b" in listfiles():
        removefile("testfile.txt.b")
    
    myfile = ABopenfile("testfile.txt", True)  # Create an AB file

    # Verify 'SE' is returned when reading an empty file
    assert('SE' == myfile.readat(None, 0))

    # Put some valid data in the file
    myfile.writeat("Stest12345E", 0)

    # Verify 'SE' is still returned because the file wasn't closed
    assert('SE' == myfile.readat(None, 0))

    # Close the file
    myfile.close()
